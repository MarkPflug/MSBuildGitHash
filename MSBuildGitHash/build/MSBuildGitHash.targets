<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <IncludeMSBuildGitHashMetadata Condition="'$(IncludeMSBuildGitHashMetadata)' == ''">true</IncludeMSBuildGitHashMetadata>
    <IncludeMSBuildGitHashInfoVersion Condition="'$(IncludeMSBuildGitHashInfoVersion)' == ''">true</IncludeMSBuildGitHashInfoVersion>
    <MSBuildGitHashValidateSuccess Condition="$(MSBuildGitHashValidateSuccess) == ''">$(MSBuildGitHashValidate)</MSBuildGitHashValidateSuccess>
    <MSBuildGitRepository Condition="'$(MSBuildGitRepository)' == '' And '$(RepositoryType)' == 'git' And '$(RepositoryUrl)' != ''">$(RepositoryUrl)</MSBuildGitRepository>
  </PropertyGroup>

  <!-- Existing commands to be backwards compatible -->
  <ItemGroup>
    <AssemblyEmbed Include="GitHash">
      <Command>$(MSBuildGitHashCommand)</Command>
      <ValidationRegex Condition="'$(MSBuildGitHashValidate)' == 'True'">$(MSBuildGitHashValidateRegex)</ValidationRegex>
    </AssemblyEmbed>
    <AssemblyEmbed Include="GitRepository">
      <Command>$(MSBuildGitRepository)</Command>
    </AssemblyEmbed>
  </ItemGroup>

  <!-- Execute custom commands for assembly meta data -->
  <Target
    Name="CommandBatch"
    Inputs="@(AssemblyEmbed)"
    Outputs="%(Identity)"
    BeforeTargets="WriteGitHash;GenerateAssemblyInfo"
    >
    <Exec
      Condition="'%(AssemblyEmbed.Command)' != '' And '%(AssemblyEmbed.Identity)' != 'GitRepository'"
      Command="%(AssemblyEmbed.Command)"
      ConsoleToMsBuild="true"
      IgnoreExitCode="true"
      >
      <Output PropertyName="ConsoleOutput" TaskParameter="ConsoleOutput"/>
      <Output PropertyName="ExitCode" TaskParameter="ExitCode"/>
    </Exec>

    <ItemGroup>
      <AssemblyEmbed Update="%(AssemblyEmbed.Identity)">
        <ValidationRegex Condition="'%(AssemblyEmbed.ValidationRegex)' == ''"></ValidationRegex>
        <ConsoleOutput>$(ConsoleOutput)</ConsoleOutput>
        <ExitCode>$(ExitCode)</ExitCode>
      </AssemblyEmbed>
    </ItemGroup>

    <PropertyGroup>
      <MSBuildGitHashVersionAttribute>$(Version)+$(ConsoleOutput)</MSBuildGitHashVersionAttribute>
      <MSBuildGitHashVersionAttribute Condition="'$(MSBuildGitHashReplaceInfoVersion)' == 'True'">$(ConsoleOutput)</MSBuildGitHashVersionAttribute>
    </PropertyGroup>

    <PropertyGroup Condition="'$(UsingMicrosoftNETSdk)' == 'true'">
      <Filtered Condition="'%(AssemblyEmbed.Identity)' == 'GitHash'"/>
      <!-- 
          SourceRevisionId is used by the Microsoft.NET.GenerateAssemblyInfo to populate
          the AssemblyInformationalVersion, this only happens in SDK builds.
          -->
      <SourceRevisionId Condition="'$(SourceRevisionId)' == '' And '$(IncludeMSBuildGitHashInfoVersion)' == 'true'">
        $(ConsoleOutput)
      </SourceRevisionId>

      <!-- suppress the sdk handling of informational version when MSBuildGitHashReplaceInfoVersion is set -->
      <IncludeSourceRevisionInInformationalVersion Condition="'$(MSBuildGitHashReplaceInfoVersion)' == 'True'">
        false
      </IncludeSourceRevisionInInformationalVersion>
      <InformationalVersion Condition="'$(MSBuildGitHashReplaceInfoVersion)' == 'True'">
        $(ConsoleOutput)
      </InformationalVersion>
    </PropertyGroup>
  </Target>

  <!-- Validate outputs from target command batch -->
  <Target
    Name="ValidateOutput"
    DependsOnTargets="CommandBatch"
   >
    <Error
     Condition="'%(AssemblyEmbed.ValidationRegex)' != '' And '%(AssemblyEmbed.ExitCode)' != '0'"
     Text="%(AssemblyEmbed.Identity) error executing command %(Command) returned error code %(ExitCode)"
    />

    <Warning
      Condition="'%(AssemblyEmbed.ValidationRegex)' == '' And '%(AssemblyEmbed.ExitCode)' != '0' And '%(AssemblyEmbed.Identity)' != 'GitRepository'"
      Text="%(AssemblyEmbed.Identity) error executing command %(AssemblyEmbed.Command) returned error code %(ExitCode)"
    />

    <PropertyGroup>
      <Filtered Condition="'%(AssemblyEmbed.ConsoleOutput)' != '' And '%(AssemblyEmbed.ExitCode)' == '0' And '%(AssemblyEmbed.ValidationRegex)' != ''"/>
      <OutputValue>%(AssemblyEmbed.ConsoleOutput)</OutputValue>
      <OutputLength>$(OutputValue.Length)</OutputLength>
      <Regex>%(AssemblyEmbed.ValidationRegex)</Regex>
      <OutputValueStart Condition="'%(AssemblyEmbed.Identity)' == 'GitHash' And $(OutputLength) &lt;= 32">$(OutputValue)</OutputValueStart>
      <OutputValueStart Condition="'%(AssemblyEmbed.Identity)' == 'GitHash' And $(OutputLength) &gt; 32">$(OutputValue.Substring(0,32))</OutputValueStart>
      <MSBuildGitHashIsDirty Condition="'%(AssemblyEmbed.Identity)' == 'GitHash'">$([System.Text.RegularExpressions.Regex]::IsMatch($(OutputValue), $(MSBuildGitHashDirtyRegex)))</MSBuildGitHashIsDirty>
      <OutputRegexMatch>$([System.Text.RegularExpressions.Regex]::IsMatch($(OutputValue), $(Regex)))</OutputRegexMatch>
    </PropertyGroup>

    <Error
      Condition="'%(AssemblyEmbed.ValidationRegex)' != '' And '%(AssemblyEmbed.Identity)' == 'GitHash' And ($(OutputLength) &gt; $(OutputLength) Or '$(OutputRegexMatch)' != 'True')"
      Text="%(AssemblyEmbed.Identity) output value starting with '$(OutputValueStart)' was invalid."
    />

    <Warning
      Condition="'%(AssemblyEmbed.Identity)' == 'GitHash' And '$(MSBuildGitHashSuppressDirtyWarning)' != 'True' And '$(MSBuildGitHashIsDirty)' == 'True'"
      Text="%(AssemblyEmbed.Identity): the git version is dirty. You should commit all changes before building, or the assembly versions will be inconsistent."
    />

    <Error
      Condition="'%(AssemblyEmbed.ValidationRegex)' != '' And '%(AssemblyEmbed.Identity)' != 'GitHash' And '$(OutputRegexMatch)' != 'True'"
      Text="%(AssemblyEmbed.Identity) output value failed regular expression comparison [%(AssemblyEmbed.ValidationRegex)]."
    />

  </Target>

  <!-- Apply commands output to assembly meta data -->
  <Target
    Name="GenerateAssemblyAttributes"
    DependsOnTargets="ValidateOutput"
  >
    <ItemGroup>
      <AssemblyAttributes Include="AssemblyMetadata">
        <_Parameter1>%(AssemblyEmbed.Identity)</_Parameter1>
        <_Parameter2>%(AssemblyEmbed.ConsoleOutput)</_Parameter2>
      </AssemblyAttributes>

      <AssemblyAttributes
        Condition="'$(MSBuildGitHashVersionAttribute)' != '' And '$(IncludeMSBuildGitHashInfoVersion)' == 'true'"
        Include="System.Reflection.AssemblyInformationalVersionAttribute"
      >
        <_Parameter1>$(MSBuildGitHashVersionAttribute)</_Parameter1>
      </AssemblyAttributes>
    </ItemGroup>
  </Target>

  <!-- Write the git hash to assembly info file -->
  <Target
    Name="WriteGitHash"
    DependsOnTargets="GenerateAssemblyAttributes"
    BeforeTargets="CoreCompile"
  >
    <PropertyGroup>
      <LanguageExt Condition="'$(Language)' == 'C#'">.cs</LanguageExt>
      <LanguageExt Condition="'$(Language)' == 'VB'">.vb</LanguageExt>
      <CodeGenLanguage Condition="'$(Language)' == 'C#'">C#</CodeGenLanguage>
      <CodeGenLanguage Condition="'$(Language)' == 'VB'">VisualBasic</CodeGenLanguage>
      <MSBuildGitHashAssemblyInfoFile>$(IntermediateOutputPath)MSBuildGitHashAssemblyInfo$(LanguageExt)</MSBuildGitHashAssemblyInfoFile>
    </PropertyGroup>

    <WriteCodeFragment
      Language="$(CodeGenLanguage)"
      OutputFile="$(MSBuildGitHashAssemblyInfoFile)"
      AssemblyAttributes="@(AssemblyAttributes)" />

    <ItemGroup>
      <Compile
        Include="$(MSBuildGitHashAssemblyInfoFile)"
        Condition="Exists('$(MSBuildGitHashAssemblyInfoFile)')" />
    </ItemGroup>
  </Target>
</Project>
