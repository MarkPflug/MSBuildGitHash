<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <IncludeMSBuildGitHashMetadata Condition="'$(IncludeMSBuildGitHashMetadata)' == ''">true</IncludeMSBuildGitHashMetadata>
    <IncludeMSBuildGitHashInfoVersion Condition="'$(IncludeMSBuildGitHashInfoVersion)' == ''">true</IncludeMSBuildGitHashInfoVersion>
    <MSBuildGitHashValidateSuccess Condition="$(MSBuildGitHashValidateSuccess) == ''">$(MSBuildGitHashValidate)</MSBuildGitHashValidateSuccess>
  </PropertyGroup>

  <Target
    Name="GetGitHash"
    BeforeTargets="WriteGitHash;GenerateAssemblyInfo">

    <PropertyGroup>
      <MSBuildGitRepository
        Condition="'$(MSBuildGitRepository)' == '' And '$(RepositoryType)' == 'git' And '$(RepositoryUrl)' != ''"
      >$(RepositoryUrl)</MSBuildGitRepository>
    </PropertyGroup>

    <Exec
      Command="$(MSBuildGitHashCommand)"
      IgnoreExitCode="true"
      ConsoleToMsBuild="true"
    >
      <Output TaskParameter="ExitCode" PropertyName="MSBuildGitHashExitCode" />
      <Output TaskParameter="ConsoleOutput" ItemName="GitVersion" />
    </Exec>
    
    <PropertyGroup>
      <GitVersion>@(GitVersion)</GitVersion>
    </PropertyGroup>
    
    <PropertyGroup Condition="'$(MSBuildGitHashExitCode)' == '0'">
      <MSBuildGitHashSuccess>True</MSBuildGitHashSuccess>
    </PropertyGroup>

    <PropertyGroup Condition="'$(MSBuildGitHashExitCode)' != '0'">
      <MSBuildGitHashSuccess>False</MSBuildGitHashSuccess>
      <!-- in the event of failure, this would contain an error message, so clear it out. -->
      <GitVersion></GitVersion>
      <MSBuildGitHashValidate>false</MSBuildGitHashValidate>
    </PropertyGroup>

    <Error
      Condition="'$(MSBuildGitHashValidateSuccess)' == 'True' And '$(MSBuildGitHashSuccess)' != 'True'"
      Text="MSBuildGitHash error executing command $(MSBuildGitHashCommand) returned error code $(MSBuildGitHashExitCode)"
    />

    <Warning
      Condition="'$(MSBuildGitHashValidateSuccess)' != 'True' And '$(MSBuildGitHashSuccess)' != 'True'"
      Text="MSBuildGitHash error executing command $(MSBuildGitHashCommand) returned error code $(MSBuildGitHashExitCode)"
    />

    <PropertyGroup>
      <MSBuildGitHashValue Condition="'$(MSBuildGitHashValue)' == ''">$(GitVersion)</MSBuildGitHashValue>
      <MSBuildGitHashValueLength>$(MSBuildGitHashValue.Length)</MSBuildGitHashValueLength>
      <MSBuildGitHashValueStart Condition="$(MSBuildGitHashValue.Length) &lt;= 32">$(MSBuildGitHashValue)</MSBuildGitHashValueStart>
      <MSBuildGitHashValueStart Condition="$(MSBuildGitHashValue.Length) &gt; 32">$(MSBuildGitHashValue.Substring(0,32))</MSBuildGitHashValueStart>
      <MSBuildGitHashRegexMatch>$([System.Text.RegularExpressions.Regex]::IsMatch($(MSBuildGitHashValue), $(MSBuildGitHashValidateRegex)))</MSBuildGitHashRegexMatch>
      <MSBuildGitHashIsDirty>$([System.Text.RegularExpressions.Regex]::IsMatch($(MSBuildGitHashValue), $(MSBuildGitHashDirtyRegex)))</MSBuildGitHashIsDirty>
    </PropertyGroup>

    <PropertyGroup Condition="'$(UsingMicrosoftNETSdk)' == 'true'">
      <!-- 
      SourceRevisionId is used by the Microsoft.NET.GenerateAssemblyInfo to populate
      the AssemblyInformationalVersion, this only happens in SDK builds.
      -->
      <SourceRevisionId
        Condition="'$(SourceRevisionId)' == '' And '$(IncludeMSBuildGitHashInfoVersion)' == 'true'"
        >$(MSBuildGitHashValue)</SourceRevisionId>
    </PropertyGroup>

    <PropertyGroup Condition="'$(UsingMicrosoftNETSdk)' == 'true' And '$(MSBuildGitHashReplaceInfoVersion)' == 'True'">
      <!-- suppress the sdk handling of informational version when MSBuildGitHashReplaceInfoVersion is set -->
      <IncludeSourceRevisionInInformationalVersion>false</IncludeSourceRevisionInInformationalVersion>
      <InformationalVersion>$(MSBuildGitHashValue)</InformationalVersion>
    </PropertyGroup>

    <Error
      Condition="'$(MSBuildGitHashExitCode)' == '0' And '$(MSBuildGitHashValidate)' == 'True' And ($(MSBuildGitHashValueLength) &gt; $(MSBuildGitHashValidateLength) Or '$(MSBuildGitHashRegexMatch)' != 'True')"
      Text="MSBuildGitHash hash value starting with '$(MSBuildGitHashValueStart)' was invalid."
    />

    <Warning 
      Condition="'$(MSBuildGitHashSuppressDirtyWarning)' != 'True' And '$(MSBuildGitHashIsDirty)' == 'True'"
      Text="MSBuildGitHash: the git version is dirty. You should commit all changes before building, or the assembly versions will be inconsistent."
    />

  </Target>

  <Target
    Name="GetGitDescribe"
    BeforeTargets="WriteGitHash;GenerateAssemblyInfo"
  >
    <Exec
      Command="$(MSBuildGitDescribeCommand)"
      IgnoreExitCode="true"
      ConsoleToMsBuild="true"
    >
      <Output TaskParameter="ExitCode" PropertyName="MSBuildGitDescribeExitCode" />
      <Output TaskParameter="ConsoleOutput" ItemName="GitDescribe" />
    </Exec>

    <PropertyGroup>
      <GitDescribe>@(GitDescribe)</GitDescribe>
    </PropertyGroup>

    <Error
      Condition="'$(MSBuildGitDescribeExitCode)' != '0'"
      Text="MSBuildGitDescribe error executing command $(MSBuildGitDescribeCommand) returned error code $(MSBuildGitDescribeExitCode)"
    />
  </Target>

  <Target
    Name="GenerateAssemblyVersionAttributes"
    Condition="'$(UsingMicrosoftNETSdk)' != 'True'"
    DependsOnTargets="GetGitHash;GetGitDescribe"
  >
    <PropertyGroup>
      <MSBuildGitHashVersionAttribute>$(Version)+$(MSBuildGitHashValue)</MSBuildGitHashVersionAttribute>
      <MSBuildGitHashVersionAttribute Condition="'$(MSBuildGitHashReplaceInfoVersion)' == 'True'">$(MSBuildGitHashValue)</MSBuildGitHashVersionAttribute>
    </PropertyGroup>

    <ItemGroup>
      <AssemblyAttributes
        Condition="'$(MSBuildGitHashVersionAttribute)' != '' And '$(IncludeMSBuildGitHashInfoVersion)' == 'true'"
        Include="System.Reflection.AssemblyInformationalVersionAttribute">
        <_Parameter1>$(MSBuildGitHashVersionAttribute)</_Parameter1>
      </AssemblyAttributes>
    </ItemGroup>
  </Target>
  
  <Target
    Name="GenerateAssemblyAttributes"
    DependsOnTargets="GetGitHash;GetGitDescribe"
  >
    <ItemGroup>
      <AssemblyAttributes Include="AssemblyMetadata" Condition="'$(IncludeMSBuildGitHashMetadata)' == 'true'">
        <_Parameter1>GitHash</_Parameter1>
        <_Parameter2>$(MSBuildGitHashValue)</_Parameter2>
      </AssemblyAttributes>

      <AssemblyAttributes Include="AssemblyMetadata">
        <_Parameter1>GitDescribe</_Parameter1>
        <_Parameter2>$(GitDescribe)</_Parameter2>
      </AssemblyAttributes>

      <AssemblyAttributes Include="AssemblyMetadata" Condition="'$(MSBuildGitRepository)' != '' And '$(IncludeMSBuildGitHashMetadata)' == 'true'">
        <_Parameter1>GitRepository</_Parameter1>
        <_Parameter2>$(MSBuildGitRepository)</_Parameter2>
      </AssemblyAttributes>
    </ItemGroup>
  </Target>

  <Target
    Name="WriteGitHash"
    DependsOnTargets="GenerateAssemblyAttributes;GenerateAssemblyVersionAttributes"
    BeforeTargets="CoreCompile">

    <PropertyGroup>
      <LanguageExt Condition="'$(Language)' == 'C#'">.cs</LanguageExt>
      <LanguageExt Condition="'$(Language)' == 'VB'">.vb</LanguageExt>
      <CodeGenLanguage Condition="'$(Language)' == 'C#'">C#</CodeGenLanguage>
      <CodeGenLanguage Condition="'$(Language)' == 'VB'">VisualBasic</CodeGenLanguage>
      <MSBuildGitHashAssemblyInfoFile>$(IntermediateOutputPath)MSBuildGitHashAssemblyInfo$(LanguageExt)</MSBuildGitHashAssemblyInfoFile>
    </PropertyGroup>

    <WriteCodeFragment 
      Language="$(CodeGenLanguage)" 
      OutputFile="$(MSBuildGitHashAssemblyInfoFile)"
      AssemblyAttributes="@(AssemblyAttributes)" />

    <ItemGroup>
      <Compile
        Include="$(MSBuildGitHashAssemblyInfoFile)"
        Condition="Exists('$(MSBuildGitHashAssemblyInfoFile)')" />
    </ItemGroup>

  </Target>
</Project>
