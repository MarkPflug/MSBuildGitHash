<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <IncludeMSBuildGitHashMetadata Condition="'$(IncludeMSBuildGitHashMetadata)' == ''">true</IncludeMSBuildGitHashMetadata>
    <IncludeMSBuildGitHashInfoVersion Condition="'$(IncludeMSBuildGitHashInfoVersion)' == ''">true</IncludeMSBuildGitHashInfoVersion>
    <MSBuildGitHashValidateSuccess Condition="$(MSBuildGitHashValidateSuccess) == ''">$(MSBuildGitHashValidate)</MSBuildGitHashValidateSuccess>
  </PropertyGroup>

  <ItemGroup>
    <AssemblyMetadata Include="GitRepository">
      <Value Condition="$(RepositoryType) == 'git'">$(RepositoryUrl)</Value>
    </AssemblyMetadata>
  </ItemGroup>

  <Target
    Name="RunAssemblyMetadataCommand"
    Inputs="@(AssemblyMetadataCommand)"
    Outputs="%(Identity)"
  >
    <Exec
      Command="%(AssemblyMetadataCommand.Command)"
      ConsoleToMsBuild="True"
      IgnoreExitCode="True"
    >
      <Output PropertyName="ConsoleOutput" TaskParameter="ConsoleOutput"/>
      <Output PropertyName="ExitCode" TaskParameter="ExitCode"/>
    </Exec>

    <ItemGroup>
      <AssemblyMetadataCommand Update="%(Identity)">
        <ConsoleOutput>$(ConsoleOutput)</ConsoleOutput>
        <ExitCode>$(ExitCode)</ExitCode>
      </AssemblyMetadataCommand>
    </ItemGroup>

    <Error
      Condition="'%(AssemblyMetadataCommand.ValidateLevel)' == 'Error' And $(ExitCode) != 0 And %(AssemblyMetadataCommand.OmitOnError) != 'True'"
      Text="MSBuildGitHash error executing command %(AssemblyMetadataCommand.Command) returned error code $(ExitCode)"
    />

    <Warning
      Condition="'%(AssemblyMetadataCommand.ValidateLevel)' == 'Warn' And $(ExitCode) != 0 And %(AssemblyMetadataCommand.OmitOnError) != 'True'"
      Text="MSBuildGitHash error executing command %(AssemblyMetadataCommand.Command) returned error code $(ExitCode)"
    />
    
    <PropertyGroup>
      <Value Condition="'$(ConsoleOutput)' != '' And $(ExitCode) == '0'">$(ConsoleOutput)</Value>
      <ValueLength>$(Value.Length)</ValueLength>
      <ValueMessage Condition="$(ValueLength) &lt;= 32">$(Value)</ValueMessage>
      <ValueMessage Condition="$(ValueLength) &gt; 32">$(Value.Substring(0,32))</ValueMessage>
      <ValueIsValid></ValueIsValid>
      <ValueIsValid Condition="%(AssemblyMetadataCommand.ValidateRegex) != ''">$([System.Text.RegularExpressions.Regex]::IsMatch('$(Value)', '%(AssemblyMetadataCommand.ValidateRegex)'))</ValueIsValid>
      <ValueIsValid Condition="%(AssemblyMetadataCommand.ValueIsValid) == ''">True</ValueIsValid>
    </PropertyGroup>

    <Error 
      Condition="'$(ValueIsValid)' != 'True' And %(AssemblyMetadataCommand.OmitOnError) != 'True'"
      Text="Metadata value starting with '$(ValueMessage)' returned from %(AssemblyMetadataCommand.Command) was invalid."
    />

    <ItemGroup 
      Condition="$(ValueIsValid) == 'True'">
      <AssemblyMetadata Include="%(AssemblyMetadataCommand.Identity)">
        <Value>$(Value)</Value>
      </AssemblyMetadata>
    </ItemGroup>

  </Target>
  
  <Target
    Name="GetGitHash"
    DependsOnTargets="RunAssemblyMetadataCommand"
    BeforeTargets="WriteGitHash;GenerateAssemblyInfo">

    <PropertyGroup>
      <MSBuildGitHashValue Condition="%(AssemblyMetadata.Identity) == 'GitHash'">%(AssemblyMetadata.Value)</MSBuildGitHashValue>
    </PropertyGroup>

    <PropertyGroup Condition="'$(UsingMicrosoftNETSdk)' == 'true'">
      
      <!-- 
      SourceRevisionId is used by the Microsoft.NET.GenerateAssemblyInfo to populate
      the AssemblyInformationalVersion, this only happens in SDK builds.
      -->
      <SourceRevisionId
        Condition="'$(SourceRevisionId)' == '' And '$(IncludeMSBuildGitHashInfoVersion)' == 'true'"
      >$(MSBuildGitHashValue)</SourceRevisionId>
    </PropertyGroup>

    <PropertyGroup Condition="'$(UsingMicrosoftNETSdk)' == 'true' And '$(MSBuildGitHashReplaceInfoVersion)' == 'True'">
      <!-- suppress the sdk handling of informational version when MSBuildGitHashReplaceInfoVersion is set -->
      <IncludeSourceRevisionInInformationalVersion>false</IncludeSourceRevisionInInformationalVersion>
      <InformationalVersion Condition="'%(AssemblyMetadata.Identity)' == 'GitHash'">%(Value)</InformationalVersion>
    </PropertyGroup>

    <PropertyGroup>
      <MSBuildGitHashIsDirty Condition="'%(AssemblyMetadata.Identity)' == 'GitHash'">$([System.Text.RegularExpressions.Regex]::IsMatch(%(Value), $(MSBuildGitHashDirtyRegex)))</MSBuildGitHashIsDirty>
    </PropertyGroup>

    <Warning 
      Condition="$(MSBuildGitHashIsDirty) == 'True' And $(MSBuildGitHashSuppressDirtyWarning) != 'True'"
      Text="MSBuildGitHash: the git version is dirty. You should commit all changes before building, or the assembly versions will be inconsistent."
    />

  </Target>

  <Target
    Name="GenerateAssemblyVersionAttributes"
    Condition="'$(UsingMicrosoftNETSdk)' != 'True'"
    DependsOnTargets="GetGitHash"
  >
    <PropertyGroup>
      <MSBuildGitHashVersionAttribute>$(Version)+$(MSBuildGitHashValue)</MSBuildGitHashVersionAttribute>
      <MSBuildGitHashVersionAttribute Condition="'$(MSBuildGitHashReplaceInfoVersion)' == 'True'">$(MSBuildGitHashValue)</MSBuildGitHashVersionAttribute>
    </PropertyGroup>

    <ItemGroup>
      <AssemblyAttributes
        Condition="'$(MSBuildGitHashVersionAttribute)' != '' And '$(IncludeMSBuildGitHashInfoVersion)' == 'true'"
        Include="AssemblyInformationalVersionAttribute">
        <_Parameter1>$(MSBuildGitHashVersionAttribute)</_Parameter1>
      </AssemblyAttributes>
    </ItemGroup>
  </Target>
  
  <Target
    Name="GenerateAssemblyAttributes"
    DependsOnTargets="GetGitHash"
  >
    <ItemGroup
      Condition="'$(IncludeMSBuildGitHashMetadata)' == 'true'"
    >
      <AssemblyAttributes Include="AssemblyMetadata" Condition="%(AssemblyMetadata.Value) != ''">
        <_Parameter1>%(AssemblyMetadata.Identity)</_Parameter1>
        <_Parameter2>%(AssemblyMetadata.Value)</_Parameter2>
      </AssemblyAttributes>
    </ItemGroup>
  </Target>

  <Target
    Name="WriteGitHash"
    DependsOnTargets="GenerateAssemblyAttributes;GenerateAssemblyVersionAttributes"
    BeforeTargets="CoreCompile">

    <PropertyGroup>
      <LanguageExt Condition="'$(Language)' == 'C#'">.cs</LanguageExt>
      <LanguageExt Condition="'$(Language)' == 'VB'">.vb</LanguageExt>
      <CodeGenLanguage Condition="'$(Language)' == 'C#'">C#</CodeGenLanguage>
      <CodeGenLanguage Condition="'$(Language)' == 'VB'">VisualBasic</CodeGenLanguage>
      <MSBuildGitHashAssemblyInfoFile>$(IntermediateOutputPath)MSBuildGitHashAssemblyInfo$(LanguageExt)</MSBuildGitHashAssemblyInfoFile>
    </PropertyGroup>

    <WriteCodeFragment 
      Language="$(CodeGenLanguage)" 
      OutputFile="$(MSBuildGitHashAssemblyInfoFile)"
      AssemblyAttributes="@(AssemblyAttributes)" />

    <ItemGroup>
      <Compile
        Include="$(MSBuildGitHashAssemblyInfoFile)"
        Condition="Exists('$(MSBuildGitHashAssemblyInfoFile)')" />
    </ItemGroup>

  </Target>
</Project>
